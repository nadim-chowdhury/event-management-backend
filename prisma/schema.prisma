// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

// generator client {
//   provider = "prisma-client-js"
// }

// datasource db {
//   provider = "postgresql"
//   url      = env("DATABASE_URL")
// }

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id       Int      @id @default(autoincrement())
  email    String   @unique
  password String
  role     String
  events   Event[]
  tickets  Ticket[]
}

model Event {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  date        DateTime
  organizer   User     @relation(fields: [organizerId], references: [id])
  organizerId Int
  tickets     Ticket[]
}

model Ticket {
  id         Int    @id @default(autoincrement())
  type       String
  price      Float
  event      Event  @relation(fields: [eventId], references: [id])
  eventId    Int
  attendee   User   @relation(fields: [attendeeId], references: [id])
  attendeeId Int
}

// datasource db {
//   provider = "postgresql"
//   url      = env("DATABASE_URL")
// }

// generator client {
//   provider = "prisma-client-js"
// }

// model User {
//   id        Int      @id @default(autoincrement())
//   email     String   @unique
//   password  String
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
// }

// model User {
//   id        Int      @id @default(autoincrement())
//   email     String   @unique
//   password  String
//   role      Role     @default(ATTENDEE)
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
// }

// enum Role {
//   ADMIN
//   ORGANIZER
//   ATTENDEE
// }

// model Event {
//   id          Int      @id @default(autoincrement())
//   title       String
//   description String
//   date        DateTime
//   time        String
//   venue       String
//   tickets     Ticket[]
//   organizer   User     @relation(fields: [organizerId], references: [id])
//   organizerId Int
//   createdAt   DateTime @default(now())
//   updatedAt   DateTime @updatedAt
// }

// model Ticket {
//   id       Int    @id @default(autoincrement())
//   type     String
//   price    Float
//   quantity Int
//   event    Event  @relation(fields: [eventId], references: [id])
//   eventId  Int
// }

// model User {
//   id        Int      @id @default(autoincrement())
//   email     String   @unique
//   password  String
//   role      Role     @default(ATTENDEE)
//   events    Event[]
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
// }

// enum Role {
//   ADMIN
//   ORGANIZER
//   ATTENDEE
// }

// model TicketPurchase {
//   id       Int      @id @default(autoincrement())
//   user     User     @relation(fields: [userId], references: [id])
//   userId   Int
//   ticket   Ticket   @relation(fields: [ticketId], references: [id])
//   ticketId Int
//   quantity Int
//   totalPrice Float
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
// }

// model Ticket {
//   id       Int    @id @default(autoincrement())
//   type     String
//   price    Float
//   quantity Int
//   event    Event  @relation(fields: [eventId], references: [id])
//   eventId  Int
//   purchases TicketPurchase[]
// }

// model Event {
//   id          Int             @id @default(autoincrement())
//   title       String
//   description String
//   date        DateTime
//   time        String
//   venue       String
//   tickets     Ticket[]
//   organizer   User            @relation(fields: [organizerId], references: [id])
//   organizerId Int
//   createdAt   DateTime        @default(now())
//   updatedAt   DateTime        @updatedAt
// }

// model User {
//   id            Int            @id @default(autoincrement())
//   email         String         @unique
//   password      String
//   role          Role           @default(ATTENDEE)
//   events        Event[]
//   ticketPurchases TicketPurchase[]
//   createdAt     DateTime       @default(now())
//   updatedAt     DateTime       @updatedAt
// }

// enum Role {
//   ADMIN
//   ORGANIZER
//   ATTENDEE
// }